// Code generated by protoc-gen-go.
// source: template.proto
// DO NOT EDIT!

/*
Package template is a generated protocol buffer package.

It is generated from these files:
	template.proto

It has these top-level messages:
	BasicDataTypes
	EnumType
	OtherType
*/
package template

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EnumType_Color int32

const (
	EnumType_white EnumType_Color = 0
	EnumType_red   EnumType_Color = 1
	EnumType_green EnumType_Color = 2
)

var EnumType_Color_name = map[int32]string{
	0: "white",
	1: "red",
	2: "green",
}
var EnumType_Color_value = map[string]int32{
	"white": 0,
	"red":   1,
	"green": 2,
}

func (x EnumType_Color) String() string {
	return proto.EnumName(EnumType_Color_name, int32(x))
}
func (EnumType_Color) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type BasicDataTypes struct {
	Int32Type  int32   `protobuf:"varint,1,opt,name=int32Type" json:"int32Type,omitempty"`
	DoubleType float64 `protobuf:"fixed64,2,opt,name=doubleType" json:"doubleType,omitempty"`
	BoolType   bool    `protobuf:"varint,3,opt,name=boolType" json:"boolType,omitempty"`
	StringType string  `protobuf:"bytes,4,opt,name=stringType" json:"stringType,omitempty"`
}

func (m *BasicDataTypes) Reset()                    { *m = BasicDataTypes{} }
func (m *BasicDataTypes) String() string            { return proto.CompactTextString(m) }
func (*BasicDataTypes) ProtoMessage()               {}
func (*BasicDataTypes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BasicDataTypes) GetInt32Type() int32 {
	if m != nil {
		return m.Int32Type
	}
	return 0
}

func (m *BasicDataTypes) GetDoubleType() float64 {
	if m != nil {
		return m.DoubleType
	}
	return 0
}

func (m *BasicDataTypes) GetBoolType() bool {
	if m != nil {
		return m.BoolType
	}
	return false
}

func (m *BasicDataTypes) GetStringType() string {
	if m != nil {
		return m.StringType
	}
	return ""
}

type EnumType struct {
	Color EnumType_Color `protobuf:"varint,1,opt,name=color,enum=template.EnumType_Color" json:"color,omitempty"`
}

func (m *EnumType) Reset()                    { *m = EnumType{} }
func (m *EnumType) String() string            { return proto.CompactTextString(m) }
func (*EnumType) ProtoMessage()               {}
func (*EnumType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EnumType) GetColor() EnumType_Color {
	if m != nil {
		return m.Color
	}
	return EnumType_white
}

type OtherType struct {
	Color EnumType_Color `protobuf:"varint,1,opt,name=color,enum=template.EnumType_Color" json:"color,omitempty"`
	Array []string       `protobuf:"bytes,2,rep,name=array" json:"array,omitempty"`
}

func (m *OtherType) Reset()                    { *m = OtherType{} }
func (m *OtherType) String() string            { return proto.CompactTextString(m) }
func (*OtherType) ProtoMessage()               {}
func (*OtherType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OtherType) GetColor() EnumType_Color {
	if m != nil {
		return m.Color
	}
	return EnumType_white
}

func (m *OtherType) GetArray() []string {
	if m != nil {
		return m.Array
	}
	return nil
}

func init() {
	proto.RegisterType((*BasicDataTypes)(nil), "template.BasicDataTypes")
	proto.RegisterType((*EnumType)(nil), "template.EnumType")
	proto.RegisterType((*OtherType)(nil), "template.OtherType")
	proto.RegisterEnum("template.EnumType_Color", EnumType_Color_name, EnumType_Color_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TemplateService service

type TemplateServiceClient interface {
	BasicDataTypesRequest(ctx context.Context, in *BasicDataTypes, opts ...grpc.CallOption) (*BasicDataTypes, error)
	EnumTypeRequest(ctx context.Context, in *EnumType, opts ...grpc.CallOption) (*EnumType, error)
	OtherTypeRequest(ctx context.Context, in *OtherType, opts ...grpc.CallOption) (*OtherType, error)
}

type templateServiceClient struct {
	cc *grpc.ClientConn
}

func NewTemplateServiceClient(cc *grpc.ClientConn) TemplateServiceClient {
	return &templateServiceClient{cc}
}

func (c *templateServiceClient) BasicDataTypesRequest(ctx context.Context, in *BasicDataTypes, opts ...grpc.CallOption) (*BasicDataTypes, error) {
	out := new(BasicDataTypes)
	err := grpc.Invoke(ctx, "/template.TemplateService/BasicDataTypesRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) EnumTypeRequest(ctx context.Context, in *EnumType, opts ...grpc.CallOption) (*EnumType, error) {
	out := new(EnumType)
	err := grpc.Invoke(ctx, "/template.TemplateService/EnumTypeRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) OtherTypeRequest(ctx context.Context, in *OtherType, opts ...grpc.CallOption) (*OtherType, error) {
	out := new(OtherType)
	err := grpc.Invoke(ctx, "/template.TemplateService/OtherTypeRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TemplateService service

type TemplateServiceServer interface {
	BasicDataTypesRequest(context.Context, *BasicDataTypes) (*BasicDataTypes, error)
	EnumTypeRequest(context.Context, *EnumType) (*EnumType, error)
	OtherTypeRequest(context.Context, *OtherType) (*OtherType, error)
}

func RegisterTemplateServiceServer(s *grpc.Server, srv TemplateServiceServer) {
	s.RegisterService(&_TemplateService_serviceDesc, srv)
}

func _TemplateService_BasicDataTypesRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicDataTypes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).BasicDataTypesRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.TemplateService/BasicDataTypesRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).BasicDataTypesRequest(ctx, req.(*BasicDataTypes))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_EnumTypeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).EnumTypeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.TemplateService/EnumTypeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).EnumTypeRequest(ctx, req.(*EnumType))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_OtherTypeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).OtherTypeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.TemplateService/OtherTypeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).OtherTypeRequest(ctx, req.(*OtherType))
	}
	return interceptor(ctx, in, info, handler)
}

var _TemplateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "template.TemplateService",
	HandlerType: (*TemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BasicDataTypesRequest",
			Handler:    _TemplateService_BasicDataTypesRequest_Handler,
		},
		{
			MethodName: "EnumTypeRequest",
			Handler:    _TemplateService_EnumTypeRequest_Handler,
		},
		{
			MethodName: "OtherTypeRequest",
			Handler:    _TemplateService_OtherTypeRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "template.proto",
}

func init() { proto.RegisterFile("template.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4e, 0x83, 0x40,
	0x10, 0xc6, 0xdd, 0x22, 0x0a, 0x73, 0xa0, 0x64, 0xd4, 0xa4, 0x21, 0xc6, 0x18, 0x0e, 0xc6, 0x13,
	0x07, 0x7a, 0x32, 0xf1, 0xe4, 0x9f, 0x93, 0x07, 0xe3, 0xda, 0x17, 0x58, 0xe8, 0xa4, 0x25, 0xa1,
	0x2c, 0x2e, 0x8b, 0xa6, 0xaf, 0xe0, 0x0b, 0xfa, 0x3a, 0xc2, 0x56, 0x28, 0x8d, 0xf5, 0xe2, 0xf1,
	0xfb, 0x7e, 0xdf, 0x30, 0xdf, 0x90, 0x05, 0x4f, 0xd3, 0xaa, 0xcc, 0x85, 0xa6, 0xa8, 0x54, 0x52,
	0x4b, 0x74, 0x3a, 0x1d, 0x7e, 0x32, 0xf0, 0xee, 0x44, 0x95, 0xa5, 0x0f, 0x42, 0x8b, 0xd9, 0xba,
	0xa4, 0x0a, 0xcf, 0xc1, 0xcd, 0x0a, 0x3d, 0x8d, 0x5b, 0x35, 0x61, 0x97, 0xec, 0xda, 0xe6, 0x5b,
	0x03, 0x2f, 0x00, 0xe6, 0xb2, 0x4e, 0x72, 0x32, 0x78, 0xd4, 0x60, 0xc6, 0x07, 0x0e, 0x06, 0xe0,
	0x24, 0x52, 0xe6, 0x86, 0x5a, 0x0d, 0x75, 0x78, 0xaf, 0xdb, 0xd9, 0x4a, 0xab, 0xac, 0x58, 0x18,
	0x7a, 0xd8, 0x50, 0x97, 0x0f, 0x9c, 0x30, 0x01, 0xe7, 0xb1, 0xa8, 0x57, 0x26, 0x1b, 0x81, 0x9d,
	0xca, 0x5c, 0x2a, 0xd3, 0xc0, 0x8b, 0x27, 0x51, 0x7f, 0x42, 0x17, 0x89, 0xee, 0x5b, 0xce, 0x37,
	0xb1, 0xf0, 0x0a, 0x6c, 0xa3, 0xd1, 0x05, 0xfb, 0x63, 0x99, 0x69, 0xf2, 0x0f, 0xf0, 0x18, 0x2c,
	0x45, 0x73, 0x9f, 0xb5, 0xde, 0x42, 0x11, 0x15, 0xfe, 0x28, 0x7c, 0x01, 0xf7, 0x59, 0x2f, 0x49,
	0xfd, 0x67, 0x09, 0x9e, 0x82, 0x2d, 0x94, 0x12, 0xeb, 0xe6, 0x6e, 0xab, 0xe9, 0xbe, 0x11, 0xf1,
	0x17, 0x83, 0xf1, 0xec, 0x67, 0xf0, 0x95, 0xd4, 0x7b, 0x96, 0x12, 0x3e, 0xc1, 0xd9, 0xee, 0x6f,
	0xe5, 0xf4, 0x56, 0x53, 0xa5, 0x71, 0xb0, 0x63, 0x37, 0x10, 0xfc, 0x49, 0xf0, 0x06, 0xc6, 0x5d,
	0x9f, 0xee, 0x33, 0xf8, 0xbb, 0x6a, 0xb0, 0xc7, 0xc3, 0x5b, 0xf0, 0xfb, 0x73, 0xbb, 0xd9, 0x93,
	0x6d, 0xae, 0x67, 0xc1, 0x3e, 0x33, 0x39, 0x32, 0xcf, 0x65, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x33, 0xab, 0x43, 0x58, 0x40, 0x02, 0x00, 0x00,
}
