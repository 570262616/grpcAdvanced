// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: template.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Template.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TemplateRoot

@implementation TemplateRoot

@end

#pragma mark - TemplateRoot_FileDescriptor

static GPBFileDescriptor *TemplateRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"template"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Color

GPBEnumDescriptor *Color_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "White\000Red\000Green\000";
    static const int32_t values[] = {
        Color_White,
        Color_Red,
        Color_Green,
    };
    static const char *extraTextFormatInfo = "\003\000%\000\001#\000\002%\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Color)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Color_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Color_IsValidValue(int32_t value__) {
  switch (value__) {
    case Color_White:
    case Color_Red:
    case Color_Green:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - BasicDataTypes

@implementation BasicDataTypes

@dynamic int32Type;
@dynamic doubleType;
@dynamic boolType;
@dynamic stringType;

typedef struct BasicDataTypes__storage_ {
  uint32_t _has_storage_[1];
  int32_t int32Type;
  NSString *stringType;
  double doubleType;
} BasicDataTypes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "int32Type",
        .dataTypeSpecific.className = NULL,
        .number = BasicDataTypes_FieldNumber_Int32Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BasicDataTypes__storage_, int32Type),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "doubleType",
        .dataTypeSpecific.className = NULL,
        .number = BasicDataTypes_FieldNumber_DoubleType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BasicDataTypes__storage_, doubleType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "boolType",
        .dataTypeSpecific.className = NULL,
        .number = BasicDataTypes_FieldNumber_BoolType,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "stringType",
        .dataTypeSpecific.className = NULL,
        .number = BasicDataTypes_FieldNumber_StringType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BasicDataTypes__storage_, stringType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BasicDataTypes class]
                                     rootClass:[TemplateRoot class]
                                          file:TemplateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BasicDataTypes__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\002\n\000\003\010\000\004\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EnumType

@implementation EnumType

@dynamic color;

typedef struct EnumType__storage_ {
  uint32_t _has_storage_[1];
  Color color;
} EnumType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "color",
        .dataTypeSpecific.enumDescFunc = Color_EnumDescriptor,
        .number = EnumType_FieldNumber_Color,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EnumType__storage_, color),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EnumType class]
                                     rootClass:[TemplateRoot class]
                                          file:TemplateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EnumType__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t EnumType_Color_RawValue(EnumType *message) {
  GPBDescriptor *descriptor = [EnumType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EnumType_FieldNumber_Color];
  return GPBGetMessageInt32Field(message, field);
}

void SetEnumType_Color_RawValue(EnumType *message, int32_t value) {
  GPBDescriptor *descriptor = [EnumType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EnumType_FieldNumber_Color];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - OtherType

@implementation OtherType

@dynamic color;
@dynamic arrayArray, arrayArray_Count;

typedef struct OtherType__storage_ {
  uint32_t _has_storage_[1];
  Color color;
  NSMutableArray *arrayArray;
} OtherType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "color",
        .dataTypeSpecific.enumDescFunc = Color_EnumDescriptor,
        .number = OtherType_FieldNumber_Color,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OtherType__storage_, color),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "arrayArray",
        .dataTypeSpecific.className = NULL,
        .number = OtherType_FieldNumber_ArrayArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OtherType__storage_, arrayArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OtherType class]
                                     rootClass:[TemplateRoot class]
                                          file:TemplateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OtherType__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OtherType_Color_RawValue(OtherType *message) {
  GPBDescriptor *descriptor = [OtherType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OtherType_FieldNumber_Color];
  return GPBGetMessageInt32Field(message, field);
}

void SetOtherType_Color_RawValue(OtherType *message, int32_t value) {
  GPBDescriptor *descriptor = [OtherType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OtherType_FieldNumber_Color];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
